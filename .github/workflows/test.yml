name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9']
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r tests/requirements.txt
          python setup.py -q install
          pip install nose  # Ensure nose is installed
          pip install wheel  # Ensure wheel is installed

      - name: Run tests
        run: nosetests --with-coverage --cover-package=btcde

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true  # Ensure the job fails if Codecov upload fails
          flags: unittests  # Add a flag to help identify the upload
          verbose: true  # Enable verbose mode for more detailed logs

  test-release:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        python-version: ['3.8']
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r tests/requirements.txt
          python setup.py -q install
          pip install wheel  # Ensure wheel is installed

      - name: Deploy to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m pip install --upgrade twine
          pip install wheel  # Ensure wheel is installed
          python -m pip install --upgrade setuptools  # Ensure setuptools is installed
          python setup.py sdist bdist_wheel
          twine upload --repository-url https://test.pypi.org/legacy/ dist/* || exit 1  # Ensure the job fails if upload fails

  release:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        python-version: ['3.8']
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r tests/requirements.txt
          python setup.py -q install
          pip install wheel  # Ensure wheel is installed

      - name: Deploy to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m pip install --upgrade twine
          pip install wheel  # Ensure wheel is installed
          python -m pip install --upgrade setuptools  # Ensure setuptools is installed
          python setup.py sdist bdist_wheel
          twine upload dist/* || exit 1  # Ensure the job fails if upload fails
